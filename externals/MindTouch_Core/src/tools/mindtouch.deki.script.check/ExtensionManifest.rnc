grammar {
   start = element extension {
      
      # full name of the extension (e.g. MindTouch Dapper Extension)
      element title { text }
      
      # (optional) copyright notice (e.g. Copyright (c) 2007-2010 MindTouch Inc.)
    & element copyright { text }?
      
      # (optional) description of the functionality contained in this extension
      # (e.g. This extension contains functions for embedding and processing dapps)
    & element description { text }?
      
      # (optional) uri to the license description page
    & element uri.license { text }?
      
      # (optional) uri to the help documentation page
    & element uri.help { text }?
      
      # (optional) uri to extension logo (100x75px)
    & element uri.logo { text }?
      
      # (optional) prefix for all extension functions (e.g. dapper)
    & element namespace { text }?
      
      # (optional) short title for extension; used by the extension dialog (e.g. Dapper)
    & element label { text }?
      
      # (optional) requirements section listing the prerequisites for running this extension (MindTouch Core 1.9.0b and later)
    & requires?
      
      # (optional) configuration section listing the config settings (MindTouch Core 1.9.0b and later)
    & config?

      # one or more functions
    & function+
   }
   
   requires = element requires {
      attribute host { text }
   }

   config = element config {
      param*
   }
   
   function = element function {
      
      # (optional) transform
      attribute transform { text }?
      
      # name of the function (e.g. table; combined with the extension prefix, this becomes dapper.table)
    & element name { text }
      
      # web-service uri corresponding to the function
    & element uri {
       attribute protocol { string "dekiscriptxml" | string "xmlrpc" | string "get" }?,
       text
    }?
      
      # (optional) description of the purpose of the function 
      # (e.g. This function embeds the outcome of a dapp as a table)
    & element description { text }?
      
      # (optional) access restrictions for function (NOTE: not yet used)
    & element access { string "public" | string "internal" | string "private" }?
      
      # (optional) return type of function invocation
    & element return {
       type? 
     & text 
     & anyElement*
    }
      
      # function parameters
    & param*
   }
   
   anyElement = element * {
      (attribute * { text }
       | text
       | anyElement)*
   }

   param = element param {
      
      # parameter name
      attribute name { text }
 
      # parameter type
    & type
      
      # (optional) indicator if parameter is optional or not
    & attribute optional { string "true" | string "false" }?
      
    & attribute default { text }?

      # (optional) parameter description (e.g. name of dapp to execute)
    & text
   }

   type = attribute type {
      string "any"
    | string "nil"
    | string "bool"
    | string "num"
    | string "str"
    | string "uri"
    | string "map"
    | string "list"
    | string "xml"
   }
}