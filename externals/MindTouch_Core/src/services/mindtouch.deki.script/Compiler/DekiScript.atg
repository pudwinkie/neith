/*
 * MindTouch DekiScript - embeddable web-oriented scripting runtime
 * Copyright (c) 2006-2010 MindTouch Inc.
 * www.mindtouch.com  oss@mindtouch.com
 *
 * For community documentation and downloads visit wiki.developer.mindtouch.com;
 * please review the licensing section.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// COCO Bugs
// * case-sensitive in unicode constants (e.g. '\u00AD' doesn't work)

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Text;
using System.Xml;

using MindTouch.Deki.Script;
using MindTouch.Deki.Script.Expr;

COMPILER DekiScript
	internal DekiScriptExpression result = DekiScriptNil.Value;

IGNORECASE
CHARACTERS
	tab = '\t'.
	eol = '\n'.
	cr = '\r'.
	nbsp = '\u00a0'.	// 0xA0 = 'unbreakable space'
	shy = '\u00ad'.		// 0xAD = 'soft-hyphen'
	letter = 'a'..'z'.
	digit = '0'..'9'.
	hex = digit + "abcdef".
	doublequotechar  = ANY - '"'.
	quotechar  = ANY - '\''.
	any = ANY.

TOKENS
	name = 
		letter { letter | digit | "_" }
		| "_" ( letter | digit | "_" ) { letter | digit | "_" }
		| "$" { digit }
		| "$" letter { letter | digit | "_" }
		.
		
	magicid = 
		"@" letter { letter | digit | "_" }
		.

	rawstring =
		"\"\"\"" { any } "\"\"\""
		| "'''" { any } "'''"
		.

	quotedstring = 
		"\"" { doublequotechar | "\\\"" } "\""
		| "'" { quotechar | "\\\'" } "'"
		.
		
	number = 
		digit { digit } 
		| "." digit { digit } ["e" ["+" | "-"] digit { digit }]
		| digit { digit } ( "." digit {digit} ["e" ["+" | "-"] digit { digit }] | "e" ["+" | "-"] digit { digit })
		.

	hexnumber = 
		"0x" hex { hex }
		.
	
	htmlentity =
		"&" (( letter { letter | digit } ) | "#" ( digit { digit } | "x" hex { hex } )) ";"
		.

COMMENTS FROM "/*" TO "*/"
COMMENTS FROM "//" TO eol

IGNORE eol + cr + tab + nbsp + shy

PRODUCTIONS

	DekiScript														(. result = DekiScriptNil.Value; .)
		=
		[ Statements<out result> ]
		.
	
	/**************
	 * Statements *
	 **************/
	 
	Statements<out DekiScriptExpression expr>						(. DekiScriptExpression list = DekiScriptNil.Value; expr = DekiScriptNil.Value; Location location = t.Location; .)
		=
		DefineStatement<out expr> [ ";" [ Statements<out list> ] ]	(. expr = DekiScriptExpression.Block(location, new[] { expr, list }); .)
		| AssignStatement<out expr> [ ";" [ Statements<out list> ] ] (. expr = DekiScriptExpression.Block(location, new[] { expr, list }); .)
		| IfElseStatement<out expr> [ Statements<out list> ]		(. expr = DekiScriptExpression.Block(location, new[] { expr, list }); .)
		| ForeachStatement<out expr> [ Statements<out list> ]		(. expr = DekiScriptExpression.Block(location, new[] { expr, list }); .)
		| SwitchStatement<out expr> [ Statements<out list> ]		(. expr = DekiScriptExpression.Block(location, new[] { expr, list }); .)
		| FlowControlStatement<out expr> [ ";" [ Statements<out list> ] ] (. expr = DekiScriptExpression.Block(location, new[] { expr, list }); .)
		| TryCatchFinallyStatement<out expr> [ ";" [ Statements<out list> ] ] (. expr = DekiScriptExpression.Block(location, new[] { expr, list }); .)
		| XmlStatement<out expr> [ Statements<out list> ]			(. expr = DekiScriptExpression.Block(location, new[] { expr, list }); .)
		| Expression<out expr> [ ";" [ Statements<out list> ] ]		(. expr = DekiScriptExpression.Block(location, new[] { expr, list }); .)
		| ";" [ Statements<out expr> ]
		.
		
	BlockStatement<out DekiScriptExpression expr>					(. expr = DekiScriptNil.Value; .)
		=
		(
			"{" [ Statements<out expr> ] "}"
			| DefineStatement<out expr> ";"
			| AssignStatement<out expr> ";"
			| IfElseStatement<out expr>
			| ForeachStatement<out expr>
			| SwitchStatement<out expr>
			| FlowControlStatement<out expr> ";"
			| TryCatchFinallyStatement<out expr> ";"
			| XmlStatement<out expr> ";"
			| [ Expression<out expr> ] ";"
		)
		.
		
	AssignStatement<out DekiScriptExpression expr>					(. expr = null; Location location = t.Location; DekiScriptExpression var; DekiScriptBinary.Op op = DekiScriptBinary.Op.LeftValue; .)
		=
		"let" AssignLHS<out var>
		(
			"="
			| "+="													(. op = DekiScriptBinary.Op.Addition; .)
			| "-="													(. op = DekiScriptBinary.Op.Subtraction; .)
			| "*="													(. op = DekiScriptBinary.Op.Multiplication; .)
			| "/="													(. op = DekiScriptBinary.Op.Division; .)
			| "%="													(. op = DekiScriptBinary.Op.Modulo; .)
			| "..="													(. op = DekiScriptBinary.Op.Concat; .)
		)															(. location = t.Location; .)
		Expression<out expr>										(. expr = DekiScriptExpression.LetStatement(location, var, (op == DekiScriptBinary.Op.LeftValue) ? expr : DekiScriptExpression.BinaryOp(expr.Location, op, var, expr)); .)
		.

	AssignLHS<out DekiScriptExpression expr>						(. Location location = t.Location; expr = null; .)
		=
		name														(. expr = DekiScriptExpression.Id(t.Location, t.val); .)
		.
		
	DefineStatement<out DekiScriptExpression expr>					(. List<DekiScriptExpression> definitions = new List<DekiScriptExpression>(); Location location = t.Location; .)
		=
		"var" DefineConstruct<out expr>								(. definitions.Add(expr); .)
		{
			"," DefineConstruct<out expr>							(. definitions.Add(expr); .)
		}															(. expr = DekiScriptExpression.Block(location, definitions.ToArray()); .)
		.
		
	DefineConstruct<out DekiScriptExpression expr>					(. expr = null; DekiScriptExpression var; Location location = Location.None; .)
		=
		AssignLHS<out var>
		(	
			"="														(. location = t.Location; .)
			Expression<out expr>									(. expr = DekiScriptExpression.VarStatement(location, var, expr); .)
			|														(. expr = DekiScriptExpression.VarStatement(location, var, DekiScriptNil.Value);.)
		)
		.

	IfElseStatement<out DekiScriptExpression expr>					(. DekiScriptExpression left = null, right = DekiScriptNil.Value; Location location = Location.None; .)
		=
		"if"														(. location = t.Location; .)
		"(" Expression<out expr> ")" 
		BlockStatement<out left>
		[ "else" BlockStatement<out right> ]						(. expr = DekiScriptExpression.IfElseStatement(location, expr, left, right); .)
		.

	TryCatchFinallyStatement<out DekiScriptExpression expr>			(.
																		DekiScriptExpression tryStatement = DekiScriptNil.Value;
																		DekiScriptExpression catchStatement = DekiScriptNil.Value; 
																		DekiScriptExpression finallyStatement = DekiScriptNil.Value;
																		Location location = Location.None;
																	.)
		=
		"try" BlockStatement<out tryStatement>						(. location = t.Location; .)
		[ "catch" BlockStatement<out catchStatement> ]
		[ "finally" BlockStatement<out finallyStatement> ]			(. expr = DekiScriptExpression.TryCatchFinally(location, tryStatement, catchStatement, finallyStatement); .)
		.

	ForeachStatement<out DekiScriptExpression expr>					(. DekiScriptExpression block = null; Location location = Location.None; DekiScriptGenerator gen = null; .)
		=
		"foreach"													(. location = t.Location; .)
		"(" 
		GeneratorHead<out gen>
		")"
		BlockStatement<out block>									(. expr = DekiScriptExpression.ForeachStatement(location, gen, block); .)
		.

	SwitchStatement<out DekiScriptExpression expr>					(.	DekiScriptSwitch.CaseBlock caseStatement; List<DekiScriptSwitch.CaseBlock> cases = new List<DekiScriptSwitch.CaseBlock>(); Location location = Location.None; .)
		=
		"switch"													(. location = t.Location; .)
		"(" Expression<out expr> ")" 
		"{"
		{ 
			CaseStatement<out caseStatement>						(. cases.Add(caseStatement); .)
		}						
		"}"															(. expr = DekiScriptExpression.SwitchStatement(location, expr, cases.ToArray()); .)
		.
		
	CaseStatement<out DekiScriptSwitch.CaseBlock block>				(.
																		List<DekiScriptExpression> conditions = new List<DekiScriptExpression>();
																		DekiScriptExpression caseexpr = null;
																		DekiScriptExpression expr = DekiScriptNil.Value;
																		Location location = t.Location;
																	.)
		=
		(
			"case" Expression<out caseexpr> ":"						(. conditions.Add(caseexpr); .)
			| "default"	":"											(. conditions.Add(null); .)
		)
		{
			"case" Expression<out caseexpr> ":"						(. conditions.Add(caseexpr); .)
			| "default"	":"											(. conditions.Add(null); .)
		}
		[
			"{"	[ Statements<out expr> ] "}"
			| Statements<out expr> 									
		]															(. block = DekiScriptExpression.SwitchCaseBlock(location, conditions, expr); .)
		.
		
	FlowControlStatement<out DekiScriptExpression expr>				(. expr = DekiScriptNil.Value; Location location = t.Location; .)
		=
		(
			"break"													(. expr = DekiScriptExpression.BreakStatement(location); .)
			| "continue"											(. expr = DekiScriptExpression.ContinueStatement(location); .)
			| "return" [ Expression<out expr> ]						(. expr = DekiScriptExpression.ReturnStatement(location, expr); .)
		)
		.
	
	XmlStatement<out DekiScriptExpression expr>						(. expr = null; .)
		=
		Xml<out expr>
		.
		
	/***************
	 * Expressions *
	 ***************/
	 
	Expression<out DekiScriptExpression expr>						(. DekiScriptExpression inner = null; Location location = Location.None; .)
		=
		TernaryExpression<out expr> {
			"!!"													(. location = t.Location; .)
			TernaryExpression<out inner>							(. expr = DekiScriptExpression.TryCatchFinally(location, expr, inner, DekiScriptNil.Value); .)
		}
		.

	TernaryExpression<out DekiScriptExpression expr>				(. DekiScriptExpression left = null, right = null; Location location = Location.None; .)
		=
		NullCoalescingExpr<out expr> [ 
			"?"														(. location = t.Location; .)
			Expression<out left> 
			":" 
			Expression<out right>									(. expr = DekiScriptExpression.TernaryOp(location, expr, left, right); .)
		]
		.

	NullCoalescingExpr<out DekiScriptExpression expr>				(. DekiScriptExpression inner = null; Location location = Location.None; .)
		=
		OrExpr<out expr> {
			"??"													(. location = t.Location; .)
			OrExpr<out inner>										(. expr = DekiScriptExpression.BinaryOp(location, DekiScriptBinary.Op.NullCoalesce, expr, inner); .)
		}
		.

	OrExpr<out DekiScriptExpression expr>							(. DekiScriptExpression inner = null; Location location = Location.None; .)
		=
		AndExpr<out expr> {
			"||"													(. location = t.Location; .)
			AndExpr<out inner>										(. expr = DekiScriptExpression.BinaryOp(location, DekiScriptBinary.Op.LogicalOr, expr, inner); .)
		}
		.

	AndExpr<out DekiScriptExpression expr>							(. DekiScriptExpression inner = null; Location location = Location.None; .)
		=
		EqlExpr<out expr> { 
			"&&"													(. location = t.Location; .)
			EqlExpr<out inner>										(. expr = DekiScriptExpression.BinaryOp(location, DekiScriptBinary.Op.LogicalAnd, expr, inner); .)
		}
		.

	EqlExpr<out DekiScriptExpression expr>							(. DekiScriptExpression inner = null; DekiScriptBinary.Op op = DekiScriptBinary.Op.LeftValue; Location location = Location.None; .)
		=
		RelExpr<out expr>  {
			(
				"!="												(. op = DekiScriptBinary.Op.NotEqual; .)
				| "=="												(. op = DekiScriptBinary.Op.Equal; .)
				| "!=="												(. op = DekiScriptBinary.Op.IdentityNotEqual; .)
				| "==="												(. op = DekiScriptBinary.Op.IdentityEqual; .)
			)														(. location = t.Location; .)
			RelExpr<out inner>										(. expr = DekiScriptExpression.BinaryOp(location, op, expr, inner); .)
		}
		.

	RelExpr<out DekiScriptExpression expr>							(. 
																		DekiScriptExpression inner = null; 
																		DekiScriptBinary.Op op = DekiScriptBinary.Op.LeftValue; 
																		Location location = Location.None;
																		bool negate = false;
																	.)
		=
		ConcatExpr<out expr> {
			(
				(
					"<"												(. op = DekiScriptBinary.Op.LessThan; .)
					| ">"											(. op = DekiScriptBinary.Op.GreaterThan; .)
					| "<="											(. op = DekiScriptBinary.Op.LessOrEqual; .)
					| ">="											(. op = DekiScriptBinary.Op.GreaterOrEqual; .)
				)													(. location = t.Location; .)
				ConcatExpr<out inner>								(. expr = DekiScriptExpression.BinaryOp(location, op, expr, inner); .)
				| "is"												(. location = t.Location; .)
				[
					"not"											(. negate = true; .)
				]
				(
					"nil"											(. expr = DekiScriptExpression.BinaryOp(location, DekiScriptBinary.Op.IsType, expr, DekiScriptExpression.Constant("nil")); .)
					| name											(. expr = DekiScriptExpression.BinaryOp(location, DekiScriptBinary.Op.IsType, expr, DekiScriptExpression.Constant(t.val)); .)
				)
				| 
				[
					"not"											(. negate = true; .)
				]
				"in"												(. location = t.Location; .)
				ConcatExpr<out inner>								(. expr = DekiScriptExpression.BinaryOp(location, DekiScriptBinary.Op.InCollection, expr, inner); .)
			)														(. if(negate) expr = DekiScriptExpression.UnaryOp(location, DekiScriptUnary.Op.LogicalNot, expr); .)
		}
		.


	ConcatExpr<out DekiScriptExpression expr>						(. DekiScriptExpression inner = null; Location location = Location.None; DekiScriptBinary.Op op = DekiScriptBinary.Op.LeftValue; .)
		=
		AddExpr<out expr> {
			(
				".."												(. op = DekiScriptBinary.Op.Concat; .)
				| "&"												(. op = DekiScriptBinary.Op.UriAppend; .)
			)														(. location = t.Location; .)
			AddExpr<out inner>										(. expr = DekiScriptExpression.BinaryOp(location, op, expr, inner); .)
		}
		.

	AddExpr<out DekiScriptExpression expr>							(. DekiScriptExpression inner = null; DekiScriptBinary.Op op = DekiScriptBinary.Op.LeftValue; Location location = Location.None; .)
		=
		MulExpr<out expr> {
			(
				"+"													(. op = DekiScriptBinary.Op.Addition; .)
				| "-"												(. op = DekiScriptBinary.Op.Subtraction; .)
			)														(. location = t.Location; .)
			MulExpr<out inner>										(. expr = DekiScriptExpression.BinaryOp(location, op, expr, inner); .)
		}
		.

	MulExpr<out DekiScriptExpression expr>							(. DekiScriptExpression inner = null; DekiScriptBinary.Op op = DekiScriptBinary.Op.LeftValue; Location location = Location.None; .)
		=
		Unary<out expr> { 
			(
				"*"													(. op = DekiScriptBinary.Op.Multiplication; .)
				| "/"												(. op = DekiScriptBinary.Op.Division; .)
				| "%"												(. op = DekiScriptBinary.Op.Modulo; .)
			)														(. location = t.Location; .)
			Unary<out inner>										(. expr = DekiScriptExpression.BinaryOp(location, op, expr, inner); .)
		}
		.

	Unary<out DekiScriptExpression expr>							(. Stack<Tuplet<Location, DekiScriptUnary.Op>> stack = new Stack<Tuplet<Location, DekiScriptUnary.Op>>(); .)
		=
		{ 
			"-"														(. stack.Push(new Tuplet<Location, DekiScriptUnary.Op>(t.Location, DekiScriptUnary.Op.Negate)); .)
			| "+"													(. /* ignore unary '+' */ .)
			| "!"													(. stack.Push(new Tuplet<Location, DekiScriptUnary.Op>(t.Location, DekiScriptUnary.Op.LogicalNot)); .)
			| "typeof"												(. stack.Push(new Tuplet<Location, DekiScriptUnary.Op>(t.Location, DekiScriptUnary.Op.TypeOf)); .)
			| "#"													(. stack.Push(new Tuplet<Location, DekiScriptUnary.Op>(t.Location, DekiScriptUnary.Op.Length)); .)
		}
		Primary<out expr>											(. 
																		while(stack.Count > 0) { 
																			var item = stack.Pop(); 
																			expr = DekiScriptExpression.UnaryOp(item.Item1, item.Item2, expr); 
																		} 
																	.)
		.

	Primary<out DekiScriptExpression expr>							(. DekiScriptExpression inner = null; expr = null; string name = null; Location location = t.Location; .)
		=
		(
			Literal<out expr>
			| "(" Statements<out expr> ")"							(. expr = DekiScriptExpression.Block(location, new[] { expr }); .)
			| name													(. expr = DekiScriptExpression.Id(location, t.val); .)
		)
		{
			"."														(. location = t.Location; .)
			(
				AnyName<out name>									(. expr = DekiScriptExpression.Access(location, expr, DekiScriptExpression.Constant(name)); .)
				| ArgList<out location, out inner>					(. expr = DekiScriptExpression.Curry(location, expr, inner); .)
				| Map<out location, out inner>						(. expr = DekiScriptExpression.Curry(location, expr, inner); .)
			)
			| "["													(. location = t.Location; .)
			Expression<out inner> 
			"]"														(. expr = DekiScriptExpression.Access(location, expr, inner); .)
			| ArgList<out location, out inner>						(. expr = DekiScriptExpression.Call(location, expr, inner); .)
			| Map<out location, out inner>							(. expr = DekiScriptExpression.Call(location, expr, inner); .)
		}
		.
	
	Literal<out DekiScriptExpression expr>							(. expr = null; Location location = Location.None; .)
		=
		Nil<out expr>
		| Bool<out expr>
		| Number<out expr>
		| String<out expr>
		| EntityString<out expr>
		| MagicId<out expr>
		| Map<out location, out expr>
		| List<out expr>
		| Xml<out expr>
		.

	Nil<out DekiScriptExpression expr>
		= (
			"_"
			| "nil"
			| "null"
		)															(. expr = DekiScriptNil.Value; .)
		.

	Number<out DekiScriptExpression expr>							(. expr = null; .)
		= 
		number														(. expr = DekiScriptExpression.Constant(SysUtil.ChangeType<double>(t.val)); .)
		| hexnumber													(. expr = DekiScriptExpression.Constant(long.Parse(t.val.Substring(2), System.Globalization.NumberStyles.AllowHexSpecifier)); .)
		.

	String<out DekiScriptExpression expr>							(. string value = null; bool block; .)
		= 
		AnyString<out value, out block>								(. expr = DekiScriptExpression.Constant(value); .)
		.

	EntityString<out DekiScriptExpression expr>						(. string value = null; .)
		= 
		htmlentity													(. expr = DekiScriptExpression.Constant(StringUtil.DecodeHtmlEntities(t.val)); .)
		.
	
	MagicId<out DekiScriptExpression expr>							(. Location location = t.Location; .)
		= 
		magicid														(. expr = DekiScriptExpression.MagicId(location, t.val.Substring(1)); .)
		.

	Bool<out DekiScriptExpression expr>								(. expr = null; .)
		=
		"true"														(. expr = DekiScriptBool.True; .)
		| "false"													(. expr = DekiScriptBool.False; .)
		.

	Map<out Location location, out DekiScriptExpression expr> (. 
																		List<DekiScriptMapConstructor.FieldConstructor> list = new List<DekiScriptMapConstructor.FieldConstructor>(); 
																		DekiScriptMapConstructor.FieldConstructor field = null; 
																		DekiScriptGenerator gen = null; 
																		location = Location.None;
																	.)
		= 
		"{"															(. location = t.Location; .)
		[ 
			Field<out field>										(. list.Add(field); .)
			{
				"," Field<out field>								(. list.Add(field); .)
			} 
			[ "foreach" GeneratorHead<out gen> ]
		]
		"}"															(. expr = DekiScriptExpression.Map(location, gen, list.ToArray()); .)
		.

	Field<out DekiScriptMapConstructor.FieldConstructor field>		(. DekiScriptExpression expr = null; DekiScriptExpression key = null; string name = null; Location location = Location.None; .)
		= 
		( 
			AnyName<out name>										(. key = DekiScriptExpression.Constant(name); .)
			| String<out key>
			| number												(. key = DekiScriptExpression.Constant(t.val); .)
			| "(" Expression<out key> ")"
		)
		":"															(. location = t.Location; .)
		Expression<out expr>										(. field = new DekiScriptMapConstructor.FieldConstructor(location, key, expr); .)
		.

	List<out DekiScriptExpression expr>								(. 
																		List<DekiScriptExpression> list = new List<DekiScriptExpression>(); 
																		Location location = Location.None;
																		DekiScriptGenerator gen = null; 
																	.)
		=
		"["															(. location = t.Location; .)
		[
			Expression<out expr>									(. list.Add(expr); .)
			{ 
				"," Expression<out expr>							(. list.Add(expr); .)
			} 
			[ "foreach" GeneratorHead<out gen> ]
		]
		"]"															(. expr = DekiScriptExpression.List(location, gen, list.ToArray()); .)
		.

	GeneratorHead<out DekiScriptGenerator gen>						(. 
																		Location location = Location.None;
																		Location wherelocation = Location.None;
																		DekiScriptExpression where = null; 
																		List<string> names = new List<string>(); 
																		DekiScriptExpression expr = null; 
																		string value = null;
																		gen = null;
																	.)
		=
		(
			"var"													(. location = t.Location; .)
			name													(. names.Add(t.val); .)
			(
				":" name 											(. value = t.val; .)
				"in"
				Expression<out expr> 
				[ 
					"where"											(. wherelocation = t.Location; .)
					Expression<out where>
				]
				| { 
					"," name										(. names.Add(t.val); .)
				} "in" Expression<out expr> 
				[ 
					"where"											(. wherelocation = t.Location; .)
					Expression<out where>
				]
			)
		)
		[ "," GeneratorNext<out gen> ]								(.
																		if(where != null) gen = new DekiScriptGeneratorIf(wherelocation, where, gen);
																		if(value == null) gen = new DekiScriptGeneratorForeachValue(location, names.ToArray(), expr, gen);
																		else gen = new DekiScriptGeneratorForeachKeyValue(location, names[0], value, expr, gen);
																	.)
		.

	GeneratorNext<out DekiScriptGenerator gen>						(. 
																		Location location = Location.None;
																		Location wherelocation = Location.None;
																		DekiScriptExpression where = null; 
																		List<string> names = new List<string>(); 
																		DekiScriptExpression expr = null; 
																		bool assign = false;
																		string value = null;
																		gen = null;
																	.)
		=
		(
			"var"													(. location = t.Location; .)
			name													(. names.Add(t.val); .)
			(
				":" name 											(. value = t.val; .)
				"in"
				Expression<out expr> 
				[ 
					"where"											(. wherelocation = t.Location; .)
					Expression<out where>
				]
				| { 
					"," name										(. names.Add(t.val); .)
				} "in" Expression<out expr> 
				[ 
					"where"											(. wherelocation = t.Location; .)
					Expression<out where>
				]
				| "=" Expression<out expr>							(. assign = true; .)
			)
			| "if"													(. location = t.Location; .)
			Expression<out expr>
		)
		[ "," GeneratorNext<out gen> ]								(.
																		if(where != null) gen = new DekiScriptGeneratorIf(wherelocation, where, gen);
																		if(names.Count == 0) gen = new DekiScriptGeneratorIf(location, expr, gen);
																		else if(assign) gen = new DekiScriptGeneratorVar(location, names[0], expr, gen);
																		else if(value == null) gen = new DekiScriptGeneratorForeachValue(location, names.ToArray(), expr, gen);
																		else gen = new DekiScriptGeneratorForeachKeyValue(location, names[0], value, expr, gen);
																	.)
		.


	Xml<out DekiScriptExpression expr>
		=
		XmlNode<out expr>
		.
		
	XmlNode<out DekiScriptExpression node>							(.
																		var nodes = new List<DekiScriptExpression>(); 
																		var attributes = new List<DekiScriptXmlElement.Attribute>(); 
																		DekiScriptXmlElement.Attribute attribute = null; 
																		string name = null;
																		string name2 = null;
																		DekiScriptExpression nameExpr = null;
																		DekiScriptExpression expr = null;
																		node = null; 
																		Location location = Location.None;
																		Location nodeslocation = Location.None;
																	.)
		=
		"<"															(. location = t.Location; .)
		(
			AnyName<out name>
			| "(" Expression<out nameExpr> ")"
		)
		{
			XmlAttribute<out attribute>								(. attributes.Add(attribute); .)
		}
		(
			">"														(. nodeslocation = t.Location; .)
			[
				Statements<out expr>								(. nodes.Add(expr); .)
			]
			(
				"</"
				AnyName<out name2>									(. 
																		if(nameExpr != null) { throw new DekiScriptParserException(string.Format("closing tag mismatch, found </{0}>, expected </>", t.val), t.Location); } 
																		else if(!StringUtil.EqualsInvariant(name, name2)) { throw new DekiScriptParserException(string.Format("closing tag mismatch, found </{0}>, expected </{1}>", name2, name), t.Location); } 
																	.)
				 ">"
				| "</>"
			)
			| "/>"
		)															(. node = DekiScriptExpression.XmlElement(location, null, nameExpr ?? DekiScriptExpression.Constant(name), attributes.ToArray(), DekiScriptExpression.Block(nodeslocation, nodes)); .)
		.
		
	XmlAttribute<out DekiScriptXmlElement.Attribute attribute>		(. 
																		string name = null; 
																		string text = null;
																		bool block = false;
																		DekiScriptExpression expr = null; 
																		attribute = null; 
																		DekiScriptExpression nameExpr = null; 
																		Location location = Location.None;
																	.)
		=
		(
			AnyName<out name>										(. location = t.Location; .)
			| "(" Expression<out nameExpr> ")"						(. location = nameExpr.Location; .)
		)
		"="
		(
			AnyString<out text, out block>							(. 
																		if(!block && StringUtil.StartsWithInvariant(text, "{{") && StringUtil.EndsWithInvariant(text, "}}")) {
																			expr = DekiScriptParser.Parse(new Location(t.origin, t.line, t.col + 3), text.Substring(2, text.Length - 4)); 
																		} else {
																			expr = DekiScriptExpression.Constant(text); 
																		}
																	.)
			| "(" Statements<out expr> ")"
		)															(. attribute = new DekiScriptXmlElement.Attribute(location, null, nameExpr ?? DekiScriptExpression.Constant(name), expr); .)
		.

	ArgList<out Location location, out DekiScriptExpression expr>	(. List<DekiScriptExpression> list = new List<DekiScriptExpression>(); location = Location.None; .)
		=
		"("															(. location = t.Location; .)
		[ 
			Expression<out expr>									(. list.Add(expr); .)
			{ 
				"," Expression<out expr>							(. list.Add(expr); .)
			} 
		]
		")"															(. expr = DekiScriptExpression.List(location, list); .)
		.
		
	AnyName<out string name>										(. name = null; .)
		=
		name														(. name = t.val; .)
		| "break"													(. name = "break"; .)
		| "case"													(. name = "case"; .)
		| "continue"												(. name = "continue"; .)
		| "default"													(. name = "default"; .)
		| "else"													(. name = "else"; .)
		| "false"													(. name = "false"; .)
		| "foreach"													(. name = "foreach"; .)
		| "if"														(. name = "if"; .)
		| "in"														(. name = "in"; .)
		| "is"														(. name = "is"; .)
		| "let"														(. name = "let"; .)
		| "nil"														(. name = "nil"; .)
		| "not"														(. name = "not"; .)
		| "null"													(. name = "null"; .)
		| "switch"													(. name = "switch"; .)
		| "true"													(. name = "true"; .)
		| "typeof"													(. name = "typeof"; .)
		| "var"														(. name = "var"; .)
		| "where"													(. name = "where"; .)
		.

	AnyString<out string value, out bool block>						(. value = null; int start; block = false; .)
		=
		rawstring													(. value = StringUtil.UnescapeString(t.val.Substring(3, t.val.Length - 6)); .) 
		| quotedstring												(. value = StringUtil.UnescapeString(t.val.Substring(1, t.val.Length - 2)); .)
		.

END DekiScript.
