<extension>
	<title>Advanced Search Extension</title>
	<label>Advanced Search</label>
	<description>This extension contains functions for adding advanced search functionality.</description>
	<uri.help>http://developer.mindtouch.com/App_Catalog/Advanced_Search</uri.help>
	<namespace>advancedSearch</namespace>
	
	<function>
		<name>form</name>
		<description>Embeds an advanced search form.</description>
		<param name="request" type="map" optional="true">Instance of the __request.args map (default: nil)</param>
		<param name="field" type="str" optional="true">Search query field name. (default: "search")</param>
		<param name="path" type="str" optional="true">Sets the value of the "located under" field. (default: nil)</param>
		<param name="publish" type="str" optional="true">Publish on channel or a URI. (default: "")</param>
		<param name="useStyles" type="bool" optional="true">If set to "false" then no styles are inlined allowing custom styles. (default: "true")</param>
		<return>
			<html xmlns:eval="http://mindtouch.com/2007/dekiscript">
				<head>
					<script type="text/javascript" src="/skins/common/yui/yahoo-dom-event/yahoo-dom-event.js"></script>
					<script type="text/javascript" src="/skins/common/yui/connection/connection.js"></script>
					<script type="text/javascript" src="/skins/common/yui/autocomplete/autocomplete.js"></script>

					<script type="text/javascript">
						var GS = GS ? GS : [];
						GS.buildLuceneQuery = function()
						{
							// build the lucene search query
							// hack hack hack: prefix, suffix
							var prefix = '', suffix = '', val = '';
							var rSplit = /\s|%20/;

							// all words
							val = GS.sanitize(this.all.value);
							if (val)
							{
								prefix += val;
							}

							// any words
							var any = '';
							val = GS.sanitize(this.any1.value);
							if (val != '')
							{
								any += ' OR "' + val + '"';
							}
							val = GS.sanitize(this.any2.value);
							if (val != '')
							{
								any += ' OR "' + val + '"';
							}
							val = GS.sanitize(this.any3.value);
							if (val != '')
							{
								any += ' OR "' + val + '"';
							}
							if (any != '')
							{
								prefix += " " + any.substring(4);
							}

							// tags
							val = GS.sanitize(this.tags.value);
							if (val != '')
							{
								var aTags = String(val).split(rSplit);
								for (var i = 0, i_m = aTags.length; i &lt; i_m; i++)
								{
									suffix += ' tag:"' + aTags[i] + '"';
								}
							}

							// not
							val = GS.sanitize(this.not.value);
							if (val != '')
							{
								// split on spaces
								var aWords = String(val).split(rSplit);
								for (var i = 0, i_m = aWords.length; i &lt; i_m; i++)
								{
									prefix += ' -"' + GS.sanitize(aWords[i]) + '"';
								}
							}
							
							// path
							val = this.path ? GS.sanitize(this.path.value) : '';
							if (val != '')
							{
								val += (val[val.length-1] != '/') ? '/*' : '*';
								suffix += ' path:' + val;
							}

							// author
							val = GS.sanitize(this.author.value);
							if (val != '')
							{
								suffix += ' author:"' + val + '"';
							}

							// type
							val = GS.sanitize(this.type.value);
							if (val != '')
							{
								suffix += ' type:"' + val + '"';
							}
							
							// set the form's search field
							var fieldName = this.getAttribute('field') || 'search';
							this.elements[fieldName].value = jQuery.trim(prefix + suffix);
							// hack hack hack: prefix, suffix
							this.elements['prefix'].value = jQuery.trim(prefix);
							this.elements['suffix'].value = jQuery.trim(suffix);

							return !GS.publish(this);
						};
						
						// helper method for cleaning up user input
						GS.sanitize = function(s)
						{
							return escape(jQuery.trim(s));
						};

						// publishes form fields on channel defined by publish attribute
						// fields are namespaced by the form name if it exists
						GS.publish = function(o)
						{
							var channel = o.getAttribute('publish') || null;
							if (channel)
							{
								var m = {};
								var namespace = o.name ? o.name + '.' : '';
								DekiWiki.$(o).find('input').each(function()
								{ 
									if (DekiWiki.hasValue(this.name))
									{
										m[namespace + this.name] = this.value;
									}
								});

								DekiWiki.publish(channel, m);
								return true;
							}
							
							return false;
						};

						GS.createAutoComplete = function(elInput, elResults)
						{
							var oDs = new YAHOO.widget.DS_XHR('/Special:Listusers', ['results', 'user']);
							oDs.scriptQueryParam = 'matchuser';
							
							var oAc = new YAHOO.widget.AutoComplete(elInput, elResults, oDs);
							oAc.minQueryLength = 2;
							oAc.animVert = false;
						};
					</script>

					<eval:if test="args.useStyles ?? true">
						<style type="text/css">
						form.gs-advancedSearch table th {
							font-weight: bold;
						}
						form.gs-advancedSearch table td {
							padding-left: 10px;
						}
						form.gs-advancedSearch input.long {
							width: 95%;
						}
						form.gs-advancedSearch input.short,
						form.gs-advancedSearch select.short {
							width: 28%;
						}
						form.gs-advancedSearch div.submit {
							padding: 10px 0;
						}

						form.gs-advancedSearch .autocomplete div.yui-ac-content {
							position: absolute;
							background-color: #fff;
							border: solid 1px #999;
							font-size: 10pt;
						}
						form.gs-advancedSearch .yui-ac-highlight {
							background-color: #EEEEFF;
						}
						#topic form.gs-advancedSearch .autocomplete div.yui-ac-bd ul {
							list-style-type: none;
							padding: 0;
							margin: 0;
						}
						#topic form.gs-advancedSearch .autocomplete div.yui-ac-bd li {
							list-style-type: none;
							padding: 2px;
						}
						</style>
					</eval:if>
				</head>
				<body block="let isuri=string.startswith(args.publish ?? '', 'http://', true) || string.startswith(args.publish ?? '', 'https://', true) || args.publish == _ || args.publish == '';">
					<noscript>Advanced Search requires JavaScript to be enabled.</noscript>

					<form
						method="get"
						class="gs-advancedSearch"
						eval:id="@formId"
						eval:action="if (isuri) { args.publish ?? ''; } else { ''; }"
						eval:field="args.field ?? 'search'"
						eval:publish="if (!isuri) { args.publish ?? ''; } else { ''; }"
						>
						<input type="hidden" eval:name="args.field ?? 'search'" value="" />
						<!-- hack hack hack: prefix, suffix -->
						<input type="hidden" name="prefix" value="" />
						<input type="hidden" name="suffix" value="" />
						<table width="100%">
							<colgroup>
								<col width="200" />
								<col width="" />
							</colgroup>
							<tr>
								<th colspan="2">Find results that have...</th>
							</tr>
							<tr>
								<td>all these words:</td>
								<td><input type="text" class="long" name="all" eval:value="args.request.all ?? ''" /></td>
							</tr>
							<!--
							<tr>
								<td>this exact phrase:</td>
								<td><input type="text" class="long" name="exact" value="" /></td>
							</tr>
							-->
							<tr>
								<td>any of these words:</td>
								<td>
									<input type="text" class="short" name="any1" eval:value="args.request.any1 ?? ''" /> OR
									<input type="text" class="short" name="any2" eval:value="args.request.any2 ?? ''" /> OR
									<input type="text" class="short" name="any3" eval:value="args.request.any3 ?? ''" />
								</td>
							</tr>
							<tr>
								<td>been tagged with:</td>
								<td><input type="text" class="long" name="tags" eval:value="args.request.tags ?? ''" /></td>
							</tr>
						</table>

						<table width="100%">
							<colgroup>
								<col width="200" />
								<col width="" />
							</colgroup>
							<tr>
								<th colspan="2">But also...</th>
							</tr>
							<tr>
								<td>don't have these words:</td>
								<td><input type="text" class="long" name="not" eval:value="args.request.not ?? ''" /></td>
							</tr>
							
							<tr>
								<td>is located under:</td>
								<td><input type="text" class="long" name="path" eval:value="args.request.path ?? args.path ?? ''" /></td>
							</tr>

							<tr>
								<td>was authored by:</td>
								<td class="autocomplete">
									<input eval:id="@acId" type="text" class="short" name="author" eval:value="args.request.author ?? ''" />
									<div eval:id="@acResultsId" class="results"></div>
								</td>
							</tr>
							<tr>
								<td>are only:</td>
								<td>
									<select name="type" class="short">
										<option value="" eval:selected="args.request.type == nil ? 'selected' : nil">any type</option>
										<option value="wiki" eval:selected="args.request.type == 'wiki' ? 'selected' : nil">wiki pages</option>
										<option value="document" eval:selected="args.request.type == 'document' ? 'selected' : nil">documents</option>
										<option value="image" eval:selected="args.request.type == 'image' ? 'selected' : nil">images</option>
									</select>
								</td>
							</tr>
						</table>
						
						<div class="submit">
							<button type="submit">Advanced Search</button>
						</div>
					</form>
					<script type="text/javascript">
						DekiWiki.$(<eval:js>'#' .. @formId</eval:js>).submit(GS.buildLuceneQuery);
						DekiWiki.$(document).ready(function()
						{
							GS.createAutoComplete(<eval:js>@acId</eval:js>, <eval:js>@acResultsId</eval:js>);
						});
					</script>
				</body>
			</html>
		</return>
	</function>

	<function>
		<name>results</name>
		<description>Displays search results from the wiki.getSearch function. More functionality is enabled if inlined on a page.</description>
		<param name="results" type="list">Search result map object returned from wiki.getSearch</param>
		<return>
			<html xmlns:eval="http://mindtouch.com/2007/dekiscript">
				<body>
					<eval:expr>
						/* initialize searchResults with backward compat */
						let searchResults = false;

						/* check if this is inlined in a page */
						let isExtension = __env.__request ? false : true;
						/* sets the maximum number of search results to display when inlining code */
						let numResults = 20;
						/* sets the length of the content preview when inlining code */
						let previewLength = 255;

						if (isExtension)
						{
							let searchResults = args.results ?? false;
						}
						else
						{
							if (__request.args.prefix ?? false)
							{
								/* args.results should be generated by the following when invoking this code as a function */
								let searchResults = wiki.getSearch(uri.decode(__request.args.prefix ?? ''), numResults, _, uri.decode(__request.args.suffix ?? ''));
							}
						}

						let html = '';
						let html ..= '&lt;h3&gt;Search Results&lt;/h3&gt;';
						let html ..= '&lt;div id="searchResults"&gt;';

						if (searchResults)
						{							
							if (#searchResults &gt; 0)
							{	
								let html ..= '&lt;ul&gt;';
								foreach (var object in searchResults)
								{
									let html ..= '&lt;li&gt;';
										if (object.path)
										{
											let html ..= '&lt;div class="title"&gt;';
											let html ..= '&lt;a href="' .. object.uri .. '"&gt;' .. object.title .. '&lt;/a&gt;';
											if (!isExtension &amp;&amp; object.parent)
											{
												let html ..= ' in &lt;a href="' .. object.parent.uri .. '"&gt;' .. object.parent.title .. '&lt;/a&gt;';
											}
											let html ..= '&lt;/div&gt;';
											let html ..= '&lt;div class="itemmatch"&gt;' .. object.date .. ' (' .. object.editsummary .. ')&lt;/div&gt;';
											if (!isExtension &amp;&amp; object.text)
											{
												let html ..= '&lt;div class="searchpreview"&gt;' .. string.substr(object.text, 0, previewLength) .. '&lt;/div&gt;';
											}
										}
										else
										{
											let html ..= '&lt;div class="title"&gt;&lt;a href="' .. object.uri .. '"&gt;' .. object.name .. '&lt;/a&gt;&lt;/div&gt;';
											let html ..= '&lt;div class="itemmatch"&gt;' .. object.date .. ' (' .. object.description .. ')&lt;/div&gt;';
										}
									let html ..= '&lt;/li&gt;';
								}
								let html ..= '&lt;/ul&gt;';
							}
							else
							{
								let html ..= '&lt;p&gt;No Results found for your search.&lt;/p&gt;';
							}
						}
						else
						{
							let html ..= '&lt;p&gt;Please enter a search above.&lt;/p&gt;';
						}

						let html ..= '&lt;/div&gt;';
						web.html(html);
					</eval:expr>
				</body>
			</html>
		</return>
	</function>
</extension>