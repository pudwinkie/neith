//      *********    DO NOT MODIFY THIS FILE     *********
//      This file is regenerated by a design tool. Making
//      changes to this file can cause errors.
namespace Expression.Blend.SampleData.SampleAppViewModel
{
	using System; 

// To significantly reduce the sample data footprint in your production application, you can set
// the DISABLE_SAMPLE_DATA conditional compilation constant and disable sample data at runtime.
#if DISABLE_SAMPLE_DATA
	internal class SampleAppViewModel { }
#else

	public class SampleAppViewModel : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		public SampleAppViewModel()
		{
			try
			{
				System.Uri resourceUri = new System.Uri("/ReactiveUI.Sample;component/SampleData/SampleAppViewModel/SampleAppViewModel.xaml", System.UriKind.Relative);
				if (System.Windows.Application.GetResourceStream(resourceUri) != null)
				{
					System.Windows.Application.LoadComponent(this, resourceUri);
				}
			}
			catch (System.Exception)
			{
			}
		}

		private CompletedBlocks _CompletedBlocks = new CompletedBlocks();

		public CompletedBlocks CompletedBlocks
		{
			get
			{
				return this._CompletedBlocks;
			}
		}
	}

	public class Model : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private string _Description = string.Empty;

		public string Description
		{
			get
			{
				return this._Description;
			}

			set
			{
				if (this._Description != value)
				{
					this._Description = value;
					this.OnPropertyChanged("Description");
				}
			}
		}
	}

	public class CompletedBlocksItem : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private Model _Model = new Model();

		public Model Model
		{
			get
			{
				return this._Model;
			}

			set
			{
				if (this._Model != value)
				{
					this._Model = value;
					this.OnPropertyChanged("Model");
				}
			}
		}

		private string _TimespanAsString = string.Empty;

		public string TimespanAsString
		{
			get
			{
				return this._TimespanAsString;
			}

			set
			{
				if (this._TimespanAsString != value)
				{
					this._TimespanAsString = value;
					this.OnPropertyChanged("TimespanAsString");
				}
			}
		}
	}

	public class CompletedBlocks : System.Collections.ObjectModel.ObservableCollection<CompletedBlocksItem>
	{ 
	}
#endif
}
