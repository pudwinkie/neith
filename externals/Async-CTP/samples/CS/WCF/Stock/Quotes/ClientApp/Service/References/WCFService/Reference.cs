//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClientApp.WCFService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Quote", Namespace="http://schemas.datacontract.org/2004/07/WCFTaskAsyncSample")]
    [System.SerializableAttribute()]
    public partial class Quote : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ChangeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TickerField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Change {
            get {
                return this.ChangeField;
            }
            set {
                if ((this.ChangeField.Equals(value) != true)) {
                    this.ChangeField = value;
                    this.RaisePropertyChanged("Change");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Price {
            get {
                return this.PriceField;
            }
            set {
                if ((this.PriceField.Equals(value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Ticker {
            get {
                return this.TickerField;
            }
            set {
                if ((object.ReferenceEquals(this.TickerField, value) != true)) {
                    this.TickerField = value;
                    this.RaisePropertyChanged("Ticker");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WCFService.IQuoteCalculatorService")]
    public interface IQuoteCalculatorService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQuoteCalculatorService/GetQuote", ReplyAction="http://tempuri.org/IQuoteCalculatorService/GetQuoteResponse")]
        ClientApp.WCFService.Quote GetQuote(string ticker);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IQuoteCalculatorService/GetQuote", ReplyAction="http://tempuri.org/IQuoteCalculatorService/GetQuoteResponse")]
        System.IAsyncResult BeginGetQuote(string ticker, System.AsyncCallback callback, object asyncState);
        
        ClientApp.WCFService.Quote EndGetQuote(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQuoteCalculatorService/GetQuotes", ReplyAction="http://tempuri.org/IQuoteCalculatorService/GetQuotesResponse")]
        System.Collections.ObjectModel.ReadOnlyCollection<ClientApp.WCFService.Quote> GetQuotes(string[] tickers);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IQuoteCalculatorService/GetQuotes", ReplyAction="http://tempuri.org/IQuoteCalculatorService/GetQuotesResponse")]
        System.IAsyncResult BeginGetQuotes(string[] tickers, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ReadOnlyCollection<ClientApp.WCFService.Quote> EndGetQuotes(System.IAsyncResult result);
    }
    
    public partial class QuoteCalculatorServiceClient : System.ServiceModel.ClientBase<IQuoteCalculatorService>, IQuoteCalculatorService {
        
        public System.Threading.Tasks.Task<ClientApp.WCFService.Quote> GetQuoteAsync(string ticker) {
            return System.Threading.Tasks.Task<ClientApp.WCFService.Quote>.Factory.FromAsync(new System.Func<string, System.AsyncCallback, object, System.IAsyncResult>(((IQuoteCalculatorService)(this)).BeginGetQuote), new System.Func<System.IAsyncResult, ClientApp.WCFService.Quote>(((IQuoteCalculatorService)(this)).EndGetQuote), ticker, null);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ReadOnlyCollection<ClientApp.WCFService.Quote>> GetQuotesAsync(string[] tickers) {
            return System.Threading.Tasks.Task<System.Collections.ObjectModel.ReadOnlyCollection<ClientApp.WCFService.Quote>>.Factory.FromAsync(new System.Func<string[], System.AsyncCallback, object, System.IAsyncResult>(((IQuoteCalculatorService)(this)).BeginGetQuotes), new System.Func<System.IAsyncResult, System.Collections.ObjectModel.ReadOnlyCollection<ClientApp.WCFService.Quote>>(((IQuoteCalculatorService)(this)).EndGetQuotes), tickers, null);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IQuoteCalculatorServiceChannel : ClientApp.WCFService.IQuoteCalculatorService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class QuoteCalculatorServiceClient : System.ServiceModel.ClientBase<ClientApp.WCFService.IQuoteCalculatorService>, ClientApp.WCFService.IQuoteCalculatorService {
        
        public QuoteCalculatorServiceClient() {
        }
        
        public QuoteCalculatorServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public QuoteCalculatorServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public QuoteCalculatorServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public QuoteCalculatorServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ClientApp.WCFService.Quote GetQuote(string ticker) {
            return base.Channel.GetQuote(ticker);
        }
        
        public System.IAsyncResult BeginGetQuote(string ticker, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetQuote(ticker, callback, asyncState);
        }
        
        public ClientApp.WCFService.Quote EndGetQuote(System.IAsyncResult result) {
            return base.Channel.EndGetQuote(result);
        }
        
        public System.Collections.ObjectModel.ReadOnlyCollection<ClientApp.WCFService.Quote> GetQuotes(string[] tickers) {
            return base.Channel.GetQuotes(tickers);
        }
        
        public System.IAsyncResult BeginGetQuotes(string[] tickers, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetQuotes(tickers, callback, asyncState);
        }
        
        public System.Collections.ObjectModel.ReadOnlyCollection<ClientApp.WCFService.Quote> EndGetQuotes(System.IAsyncResult result) {
            return base.Channel.EndGetQuotes(result);
        }
    }
}
